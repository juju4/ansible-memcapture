---

- name: Include version-specific variables for Ubuntu.
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'
- name: Include version-specific variables for RedHat
  include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat"

- debug: var=memcapture_use_linpmem
- debug: var=memcapture_use_fmem
- debug: var=memcapture_use_lmg
- debug: var=memcapture_capture

- name: check appropriate directories exist
  file: dest={{ item }} state=directory mode=0700
  with_items:
    - "{{ dst_mount }}"
    - "{{ dst_path }}"
    - "{{ bin_path }}"

- name: Windows memory capture
  include: memory-win.yml
  when: ansible_os_family == 'Windows'

- name: Darwin memory capture
  include: memory-darwin.yml
  when: ansible_os_family == 'Darwin'

# capture memory
## https://docs.google.com/presentation/d/1savcvqRcMXpRyVrybWvbHGbJTgjInZcwLB5VokJdKa8/edit#slide=id.g26dcd0ccb_030
#"c:\Program Files\Rekall\winpmem_1.6.0.exe" -e - | c:\Users\mic\Desktop\ncat.exe 172.16.21.93 8001  --ssl
#ncat -l 8001 --ssl -v > myimage.elf

- debug: var=memcapture_use_linpmem
- include: memory-linpmem.yml
  when: >
    ansible_system == 'Linux' and ansible_architecture == 'x86_64' and
    memcapture_use_linpmem is defined and memcapture_use_linpmem
  tags:
    - linpmem

## the next two applies mostly for i386 arch or older system
- include: memory-fmem.yml
  when: >
    ansible_system == 'Linux' and ansible_architecture == 'i386' and
    memcapture_use_fmem is defined and memcapture_use_fmem
  tags:
    - fmem

- include: memory-lmg.yml
  when: ansible_system == 'Linux' and memcapture_use_lmg is defined and memcapture_use_lmg
  tags:
    - lmg

## compress file after?
- block:
    - name: Ensure we have output files (GNU find)
      shell: "find {{ dst_path }}/ -ls | egrep '(aff4|lime|zip|fmem|raw|map)'"
      register: lsout
      changed_when: false
      ignore_errors: true
    - debug: var=lsout.stdout_lines
  when: ansible_system == 'Linux' and ansible_distribution != 'Alpine'
- block:
    - name: Ensure we have output files
      shell: "find {{ dst_path }}/ | egrep '(aff4|lime|zip|fmem|raw|map)'"
      register: lsout2
      changed_when: false
      ignore_errors: true
    - debug: var=lsout2.stdout_lines
  when: ansible_system != 'Linux' or ansible_distribution == 'Alpine'

- debug: var=memcapture_pull
- block:
#    - name: archive output content
## v2.3
#      archive: "src={{ dst_path }} dest={{ dst_mount }}/memcapture-{{ prefix }}-memory.tar.gz"
#      command: >
#        tar czf {{ dst_mount }}/memcapture-{{ prefix }}-memory.tar.gz {{ dst_path }}/
#      args:
#        creates: "{{ dst_mount }}/memcapture-{{ prefix }}-memory.tar.gz"
## 2.6+ for net_get
    - name: retrieve output dir to orchestrator
      net_get:
        src: "{{ item }}"
        dest: "{{ memcapture_pulldir }}/"
        protocol: sftp
## Note: too memory consuming to transfer with python/base64
#      fetch: "src={{ item }} dest={{ memcapture_pulldir }}/"
#      with_items:
#        - "{{ dst_mount }}/memcapture-{{ prefix }}-memory.tar.gz"
      with_fileglob:
        - "{{ dst_path }}/*"
      when: ansible_version.full is version_compare('2.6', '>=')
  when: memcapture_pull is defined and memcapture_pull
