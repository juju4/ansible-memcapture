---

- name: apt | Extra packages install for lmg
  apt: name={{item}} state=present
  with_items:
    - git
    - zip
    - make
    - gcc
    - linux-generic
    - linux-headers-{{ ansible_kernel }}
  become: yes
  when: (memcapture_install is defined and memcapture_install) and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
## Note: seems distribution are not keeping their linux-headers for all base kernel...
##	Ubuntu12.04 "No package matching 'linux-headers-3.19.0-30-generic' is available"
  ignore_errors: true

- name: yum | Extra packages install for lmg
  yum: name={{item}} state=present
  with_items:
    - git
    - zip
    - make
    - gcc
    - gcc-c++
    - kernel-devel
    - kernel-headers
  become: yes
  when: (memcapture_install is defined and memcapture_install) and (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')

- name: check installed kernels
  command: "ls /usr/src/kernels/"
  changed_when: false
  register: d1
  when: (memcapture_install is defined and memcapture_install) and (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')
- name: redhat | check installed kernel-headers rpm
  command: "rpm -qa kernel-headers"
  changed_when: false
  register: d2
  when: (memcapture_install is defined and memcapture_install) and (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')
- debug: var=d1.stdout_lines
  when: (memcapture_install is defined and memcapture_install)
- debug: var=d2.stdout_lines
  when: (memcapture_install is defined and memcapture_install)
- name: Ensure appropriate symlink to latest src/kernels in order to build module
  file: "src=/usr/src/kernels/{{ d2.stdout_lines.0 | replace('kernel-headers-', '') }} dest=/lib/modules/{{ ansible_kernel }}/build state=link"
  #when: (memcapture_install is defined and memcapture_install) and (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS') and ansible_distribution_version == '7.1'
  become: yes
  ignore_errors: true
  when: (memcapture_install is defined and memcapture_install) and (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')
- stat: path={{ bin_path }}/LiME
  register: gitlime
- name: Lime git clone
  git:
    repo=https://github.com/504ensicsLabs/LiME.git
    dest={{ bin_path }}/LiME
  when: not gitlime.stat.exists and (memcapture_download is defined and memcapture_download)

- stat: path={{ bin_path }}/volatility
  register: gitvol
- name: Volatility git clone
  git:
    repo=https://github.com/volatilityfoundation/volatility
    dest={{ bin_path }}/volatility
  when: not gitvol.stat.exists and (memcapture_download is defined and memcapture_download)

- stat: path={{ bin_path }}/lmg
  register: gitlmg
#    repo=https://github.com/juju4/lmg
- name: lmg git clone
  git:
    repo=https://github.com/halpomeranz/lmg
    dest={{ bin_path }}/lmg
  when: not gitlmg.stat.exists and (memcapture_download is defined and memcapture_download)
- name: CPU included in KVER
  replace: dest="{{ bin_path }}/lmg/lmg" regexp='LIMEMOD=\$LIMEDIR/lime-\$KVER-\$CPU.ko' replace='LIMEMOD=$LIMEDIR/lime-$KVER.ko' backup=yes
  when: (memcapture_install is defined and memcapture_install)
- name: update volatility dir
  replace: dest="{{ bin_path }}/lmg/lmg" regexp='VOLDIR=\$\(dirname \$\(find \$BUILDDIR -name module.c\) 2\>/dev/null\)' replace='VOLDIR={{ bin_path }}/volatility' backup=yes
  when: (memcapture_install is defined and memcapture_install)

- command: "ls {{ bin_path }}/lmg"
  changed_when: false
  register: lmgdir
- debug: var=lmgdir
- stat: path={{ bin_path }}/lmg/dwarfdump/dwarfdump-i686
  register: dwarf
## Note: if nfs/samba mount, owner/perms might not be preserved so ignore those errors
- name: Extract dwarfdump utilities
## FAILED! => {"failed": true, "msg": "file or module does not exist: /tmp/ir-bin/lmg/static-dwarfdump.tgz"}
#  unarchive: src={{ bin_path }}/lmg/static-dwarfdump.tgz dest={{ bin_path }}/lmg
  command: "tar xzf {{ bin_path }}/lmg/static-dwarfdump.tgz chdir={{ bin_path }}/lmg"
  when: not dwarf.stat.exists and (memcapture_download is defined and memcapture_download)
  ignore_errors: true

- stat: path={{ dst_path }}/lmg/capture
  register: memcapture
- name: Take memory capture (lmg/lime)
#  command: "bash lmg -y chdir={{ bin_path }}/lmg"
  command: "bash lmg -y -d {{ dst_path }} -B {{ bin_path }}/LiME chdir={{ bin_path }}/lmg"
  environment:
    TARGETDIR: "{{ dst_path }}"
  become: yes
  when: not memcapture.stat.exists and (memcapture_capture is defined and memcapture_capture)
  ignore_errors: true
  register: lmgout

- debug: var=lmgout.stdout_lines
  when: lmgout is defined and lmgout.rc != 0


