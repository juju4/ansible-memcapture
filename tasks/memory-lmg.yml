---

- name: Debian | Extra packages install for lmg
  ansible.builtin.apt: name={{ memory_lmg_deps }} state=present
  become: yes
  when: >
    (memcapture_install is defined and memcapture_install | bool) and
    (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
## Note: seems distribution are not keeping their linux-headers for all base kernel...
##       Ubuntu12.04 "No package matching 'linux-headers-3.19.0-30-generic' is available"
  failed_when: false
  register: pkg_result
  until: pkg_result is success

- name: Redhat | Extra packages install for lmg
  ansible.builtin.yum: name={{ memory_lmg_deps }} state=present
  become: yes
  when: >
    (memcapture_install is defined and memcapture_install | bool) and
    (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')
  register: pkg_result
  until: pkg_result is success

- import_tasks: gcc.yml

- name: Check installed kernels
  ansible.builtin.command: "ls /usr/src/kernels/"
  changed_when: false
  register: d1
  when: >
    (memcapture_install is defined and memcapture_install | bool) and
    (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')
- name: Redhat | check installed kernel-headers rpm
  ansible.builtin.command: "rpm -qa kernel-headers"
  args:
    warn: False
  changed_when: false
  register: d2
  when: >
    (memcapture_install is defined and memcapture_install) and
    (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')
- name: Debug | kernel src directories
  ansible.builtin.debug: var=d1.stdout_lines
  when: (memcapture_install is defined and memcapture_install | bool)
- name: Debug | kernel-headers packages
  ansible.builtin.debug: var=d2.stdout_lines
  when: (memcapture_install is defined and memcapture_install | bool)
- name: Ensure appropriate symlink to latest src/kernels in order to build module
  ansible.builtin.file:
    src: "/usr/src/kernels/{{ d2.stdout_lines.0 | replace('kernel-headers-', '') }}"
    dest: "/lib/modules/{{ ansible_kernel }}/build"
    state: link
  become: yes
  failed_when: false
  when: >
    (memcapture_install is defined and memcapture_install | bool) and
    (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS')
- name: Check if LiME directory is present
  ansible.builtin.stat: path={{ memcapture_bin_path }}/LiME
  register: gitlime
- name: Lime git clone
  ansible.builtin.git:
    repo: https://github.com/504ensicsLabs/LiME.git
    dest: "{{ memcapture_bin_path }}/LiME"
    version: "{{ memcapture_lime_version | default('9bd146ae54ef9f04acc09c44544aaf66aa8566d1') }}"
  when: not gitlime.stat.exists and (memcapture_download is defined and memcapture_download | bool)
  ignore_errors: true
  register: clonelime

# if https://help.github.com/articles/https-cloning-errors/
- name: Get Lime
  block:
    - name: Lime fetch - alternate
      ansible.builtin.get_url:
        url: https://github.com/504ensicsLabs/LiME/archive/master.zip
        dest: "{{ memcapture_bin_path }}/LiME.zip"
        mode: '0600'
    - name: Ensure unzip is present
      ansible.builtin.package:
        name: unzip
        state: present
      register: pkg_result
      until: pkg_result is success
    - name: Unarchive LiME
      ansible.builtin.unarchive:
        src: "{{ memcapture_bin_path }}/LiME.zip"
        dest: "{{ memcapture_bin_path }}"
        creates: "{{ memcapture_bin_path }}/LiME/src/Makefile"
    - name: Symlink usual path
      ansible.builtin.file:
        src: "{{ memcapture_bin_path }}/LiME-master"
        dest: "{{ memcapture_bin_path }}/LiME"
        state: link
  when: not gitlime.stat.exists and (memcapture_download is defined and memcapture_download | bool) and clonelime.failed

- name: Check if volatility source is present
  ansible.builtin.stat: path={{ memcapture_bin_path }}/volatility
  register: gitvol
- name: Volatility git clone
  ansible.builtin.git:
    repo: https://github.com/volatilityfoundation/volatility
    dest: "{{ memcapture_bin_path }}/volatility"
    version: "{{ memcapture_volatility_version | default('f1ac0b1e90cf486da2a37cffb3448b208943d226') }}"
  when: not gitvol.stat.exists and (memcapture_download is defined and memcapture_download | bool)
  ignore_errors: true
  register: clonevol

# if https://help.github.com/articles/https-cloning-errors/
- name: If git clone failed
  block:
    - name: Volatility fetch - alternate
      ansible.builtin.get_url:
        url: https://downloads.volatilityfoundation.org/releases/2.6/volatility-2.6.zip
        dest: "{{ memcapture_bin_path }}/volatility-2.6.zip"
        mode: '0600'
    - name: Ensure unzip is present
      ansible.builtin.package:
        name: unzip
        state: present
      register: pkg_result
      until: pkg_result is success
    - name: Unarchive Volatility
      ansible.builtin.unarchive:
        src: "{{ memcapture_bin_path }}/volatility-2.6.zip"
        dest: "{{ memcapture_bin_path }}"
        creates: "{{ memcapture_bin_path }}/volatility-master/setup.py"
    - name: Symlink usual path
      ansible.builtin.file:
        src: "{{ memcapture_bin_path }}/volatility-master"
        dest: "{{ memcapture_bin_path }}/volatility"
        state: link
  when: not gitvol.stat.exists and (memcapture_download is defined and memcapture_download | bool) and clonevol.failed

- name: Check if LMG directory is present
  ansible.builtin.stat: path={{ memcapture_bin_path }}/lmg
  register: gitlmg
#    repo=https://github.com/juju4/lmg
- name: Lmg git clone
  ansible.builtin.git:
    repo: https://github.com/halpomeranz/lmg
    dest: "{{ memcapture_bin_path }}/lmg"
    version: "{{ memcapture_lmg_version | default('2cef0e6b67b30c595f73a4f8c28e3cb862f69189') }}"
    update: no
  when: not gitlmg.stat.exists and (memcapture_download is defined and memcapture_download | bool)
  ignore_errors: true
  register: clonelmg

# if https://help.github.com/articles/https-cloning-errors/
- name: If lmg git clone failed
  block:
    - name: LMG fetch - alternate
      ansible.builtin.get_url:
        url: https://github.com/halpomeranz/lmg/archive/master.zip
        dest: "{{ memcapture_bin_path }}/LMG.zip"
        mode: '0600'
    - name: Ensure unzip is present
      ansible.builtin.package:
        name: unzip
        state: present
      register: pkg_result
      until: pkg_result is success
    - name: Unarchive LMG
      ansible.builtin.unarchive:
        src: "{{ memcapture_bin_path }}/LMG.zip"
        dest: "{{ memcapture_bin_path }}"
        creates: "{{ memcapture_bin_path }}/lmg-master/src/Makefile"
    - name: Symlink usual path
      ansible.builtin.file:
        src: "{{ memcapture_bin_path }}/lmg-master"
        dest: "{{ memcapture_bin_path }}/lmg"
        state: link
  when: not gitlmg.stat.exists and (memcapture_download is defined and memcapture_download | bool) and clonelmg.failed

- name: CPU included in KVER
  ansible.builtin.replace:
    dest: "{{ memcapture_bin_path }}/lmg/lmg"
    regexp: 'LIMEMOD=\$LIMEDIR/lime-\$KVER-\$CPU.ko'
    replace: 'LIMEMOD=$LIMEDIR/lime-$KVER.ko'
    backup: yes
  when: (memcapture_install is defined and memcapture_install)
- name: Update volatility dir
  ansible.builtin.replace:
    dest: "{{ memcapture_bin_path }}/lmg/lmg"
    regexp: 'VOLDIR=\$\(dirname \$\(find \$BUILDDIR -name module.c\) 2\>/dev/null\)'
    replace: 'VOLDIR={{ memcapture_bin_path }}/volatility'
    backup: yes
  when: (memcapture_install is defined and memcapture_install)

- name: Check if dwarfdump present for LMG
  ansible.builtin.command: "ls {{ memcapture_bin_path }}/lmg"
  changed_when: false
  register: lmgdir
- name: Debug | lmg directory listing
  ansible.builtin.debug: var=lmgdir
- name: Check if dwarfdump-i686 is present
  ansible.builtin.stat: path={{ memcapture_bin_path }}/lmg/dwarfdump/dwarfdump-i686
  register: dwarf
## Note: if nfs/samba mount, owner/perms might not be preserved so ignore those errors
- name: Extract dwarfdump utilities
  ansible.builtin.unarchive:
    src: "{{ memcapture_bin_path }}/lmg/static-dwarfdump.tgz"
    dest: "{{ memcapture_bin_path }}/lmg"
  when: not dwarf.stat.exists and (memcapture_download is defined and memcapture_download | bool)
  failed_when: false

- name: Update module.dwarf build path in lmg
  ansible.builtin.replace:
    dest: "{{ memcapture_bin_path }}/lmg/lmg"
    regexp: 'cd \$VOLDIR$'
    replace: 'cd $VOLDIR/tools/linux'
    backup: yes

- name: Check if existing LMG capture
  ansible.builtin.stat: path={{ dst_path }}/lmg/capture
  register: memcapture
- name: Take memory capture (lmg/lime)
  # command: "bash lmg -y chdir={{ memcapture_bin_path }}/lmg"
  ansible.builtin.command: "bash lmg -y -d {{ dst_path }} -B {{ memcapture_bin_path }}/LiME/src chdir={{ memcapture_bin_path }}/lmg"
  environment:
    TARGETDIR: "{{ dst_path }}"
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:{{ memcapture_bin_path }}/lmg/dwarfdump"
  become: yes
  when: not memcapture.stat.exists and (memcapture_capture is defined and memcapture_capture | bool)
  ignore_errors: true
  register: lmgout

## https://github.com/volatilityfoundation/volatility/wiki/Linux
- name: Linux not alpine
  block:
    - name: Retrieve lmg output dir
      ansible.builtin.shell: |
        set -o pipefail
        ls -At {{ dst_path }}/capture/ | head -1
      args:
        executable: /bin/bash
      changed_when: false
      register: lscapture
      ignore_errors: true
    - name: Set fact output directory name
      ansible.builtin.set_fact:
        # fname: "{{ ansible_hostname }}-{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}.{{ ansible_date_time.minute }}.{{ ansible_date_time.second }}"
        fname: "{{ lscapture.stdout }}"
  when: ansible_distribution != 'Alpine'
- name: Alpine
  block:
    - name: Retrieve lmg output dir
      ansible.builtin.shell: |
        set -o pipefail
        ls -At {{ dst_path }}/capture/ | head -1
      changed_when: false
      register: lscapture
      ignore_errors: true
    - name: Set fact output directory name
      ansible.builtin.set_fact:
        # fname: "{{ ansible_hostname }}-{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}.{{ ansible_date_time.minute }}.{{ ansible_date_time.second }}"
        fname: "{{ lscapture.stdout }}"
  when: ansible_distribution == 'Alpine'

- name: Retrieve output hash
  ansible.builtin.stat: path="{{ dst_path }}/capture/{{ fname }}/{{ fname }}-memory.lime" checksum_algorithm=sha256
  register: outputstat
- name: Debug | output file hash
  ansible.builtin.debug: var=outputstat.stat.checksum

- name: Profile
  block:
    - name: Debug | kernel
      ansible.builtin.debug: var=ansible_kernel
    - name: Recreate volatility profile archive
      ansible.builtin.command: >
        zip {{ memcapture_bin_path }}/volatility/volatility/plugins/overlays/linux/{{ ansible_distribution }}{{ ansible_distribution_version }}-{{ ansible_architecture }}.zip
        volatility/tools/linux/module.dwarf /boot/System.map-{{ ansible_kernel }}
      args:
        chdir: "{{ memcapture_bin_path }}"
        creates: "{{ ansible_distribution }}{{ ansible_distribution_version }}-{{ ansible_architecture }}.zip"

    - name: Check profile is valid
      ansible.builtin.command: >
        python {{ memcapture_bin_path }}/volatility/vol.py --plugins . -f {{ fname }}-memory.lime
            --profile {{ fname }}-profile imageinfo
      args:
        chdir: "{{ dst_path }}/capture/{{ fname }}"
      changed_when: false
      register: checkprofile
      # failed_when: "'Invalid profile' in checkprofile.stderr"
      failed_when: false
    - name: Debug | profile check output
      ansible.builtin.debug: var=checkprofile
  when: >
    not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker")
        ) and
    not (ansible_distribution_major_version == "6" and ansible_virtualization_type == "kvm")

- name: Debug | lmg output
  ansible.builtin.debug: var=lmgout.stdout_lines
  when: lmgout is defined and lmgout.rc is defined and lmgout.rc != 0
