---
## how to measure memory impact? ps, /proc/*pid*/status, pmap, smem... http://elinux.org/Runtime_Memory_Measurement

- name: Set fact linpmem_archive
  ansible.builtin.set_fact:
    linpmem_archive: "{{ memcapture_bin_path }}/{{ memcapture_linpmem_url | regex_replace('^.*/([^/].*)$', '\\1') }}"
- name: Set fact linpmem_bin...
  ansible.builtin.set_fact:
    linpmem_bin: "{{ linpmem_archive | regex_replace('.(gz|tgz)$', '') }}"
    linpmem_capture: "{{ dst_path }}/{{ prefix }}-memory-linpmem.{{ memcapture_linpmem_ext }}"

- name: Ensure ansible dependencies are present
  ansible.builtin.package:
    name: libselinux-python
    state: present
  register: pkg_result
  until: pkg_result is success
  when: memcapture_install and (ansible_os_family == "RedHat" and ansible_distribution_major_version | int != 8)
#  when: >
#    memcapture_install and
#    ansible_selinux is defined and ansible_selinux and ansible_selinux.status == 'enabled'

- name: Check if linpmem archive is present
  ansible.builtin.stat:
    path: "{{ linpmem_bin }}"
  register: linpmem
- name: Linpmem download
  ansible.builtin.get_url:
    url: "{{ memcapture_linpmem_url }}"
    dest: "{{ linpmem_archive }}"
    mode: '0400'
  register: dl_result
  until: dl_result is success
  when: not linpmem.stat.exists and (memcapture_download is defined and memcapture_download | bool)

- name: Extract linpmem
  ansible.builtin.command: "gunzip {{ linpmem_archive }}"
  args:
    chdir: "{{ memcapture_bin_path }}"
  ## require unzip to be installed
  # unarchive: src="{{ memcapture_bin_path }}/{{ linpmem_archive }}" dest="{{ memcapture_bin_path }}" copy=no
  when: not linpmem.stat.exists and memcapture_linpmem_url.find('.tgz') != -1

- name: Install linpmem locally
  ansible.builtin.copy:
    src: "{{ linpmem_bin }}"
    dest: /usr/local/bin/
    mode: '0700'
    remote_src: true
  when: memcapture_install

- name: Check appropriate permissions
  ansible.builtin.file:
    path: "{{ linpmem_bin }}"
    mode: '0700'

- name: Check if existing linpmem capture
  ansible.builtin.stat:
    path: "{{ linpmem_capture }}"
  register: memcapture2

- name: Memory capture (linpmem)
  ansible.builtin.command: "{{ linpmem_bin }} {{ memcapture_linpmem_args }} -o {{ linpmem_capture }}"
  args:
    chdir: "{{ memcapture_bin_path }}"
  become: yes
  when: not memcapture2.stat.exists and (memcapture_capture is defined and memcapture_capture | bool)
  failed_when: false
  async: "{{ memcapture_retries * memcapture_delay }}"
  poll: 0
  register: linpmemcapture

- name: Check on async task for linpmem capture
  ansible.builtin.async_status:
    jid: "{{ linpmemcapture.ansible_job_id }}"
  register: job_result
  until: job_result.finished or linpmemcapture.finished
  retries: "{{ memcapture_retries }}"
  delay: "{{ memcapture_delay }}"
  when: not memcapture2.stat.exists and (memcapture_capture is defined and memcapture_capture | bool)

- name: Retrieve output hash
  ansible.builtin.stat:
    path: "{{ linpmem_capture }}"
    checksum_algorithm: sha256
  register: outputstat
- name: Debug | file output hash
  ansible.builtin.debug:
    var: outputstat.stat.checksum

- name: Linpmem | get debug info
  ansible.builtin.shell: "{{ item.c }}"  # noqa command-instead-of-shell
  args:
    creates: "{{ item.t }}"
  with_items:
    - { c: "cat /proc/meminfo > {{ dst_path }}/{{ prefix }}-proc-meminfo",
        t: "{{ dst_path }}/{{ prefix }}-proc-meminfo"
    }
    - { c: "cat /proc/iomem > {{ dst_path }}/{{ prefix }}-proc-iomem", t: "{{ dst_path }}/{{ prefix }}-proc-iomem" }
    - { c: "cat /proc/mtrr > {{ dst_path }}/{{ prefix }}-proc-mtrr", t: "{{ dst_path }}/{{ prefix }}-proc-mtrr" }
    - { c: "readelf -a /proc/kcore > {{ dst_path }}/{{ prefix }}-proc-kcore",
        t: "{{ dst_path }}/{{ prefix }}-proc-kcore"
    }
  failed_when: false
  when: not memcapture2.stat.exists and (memcapture_capture is defined and memcapture_capture | bool)
