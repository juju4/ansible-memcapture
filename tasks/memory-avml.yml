---

- name: Set fact avml_archive
  ansible.builtin.set_fact:
    avml_archive: "{{ memcapture_bin_path }}/{{ memcapture_avml_url | regex_replace('^.*/([^/].*)$', '\\1') }}"
- name: Set fact avml_bin...
  ansible.builtin.set_fact:
    avml_bin: "{{ memcapture_bin_path }}/avml-{{ memcapture_avml_v }}/target/x86_64-unknown-linux-musl/release/avml"
    avml_capture: "{{ dst_path }}/{{ prefix }}-memory-avml.{{ memcapture_avml_ext }}"

- name: Check if orchestrator has avml binary
  ansible.builtin.stat:
    path: "{{ orchestrator_files_archives }}/avml"
  register: avmlbin
  delegate_to: localhost

- name: Install avml
  when: not avmlbin.stat.exists
  block:
    - name: Ensure ansible dependencies are present
      ansible.builtin.package:
        name: libselinux-python
        state: present
      register: pkg_result
      until: pkg_result is success
      when: memcapture_install and ansible_os_family == "RedHat"

    - name: Check if avml archive is present
      ansible.builtin.stat:
        path: "{{ avml_bin }}"
      register: avml
    - name: Microsoft Avml download
      ansible.builtin.get_url:
        url: "{{ memcapture_avml_url }}"
        dest: "{{ avml_archive }}"
        mode: '0400'
      register: dl_result
      until: dl_result is success
      when: not avml.stat.exists and (memcapture_download is defined and memcapture_download | bool)

    - name: Extract avml
      ansible.builtin.unarchive:
        src: "{{ avml_archive }}"
        dest: "{{ memcapture_bin_path }}"
        remote_src: true
      when: not avml.stat.exists

    # No musl* packages on centos7, only starting with Fedora29
    - name: Ensure avml build dependencies
      ansible.builtin.package:
        name: "{{ memory_avml_deps }}"
        state: present
      become: yes
      register: pkg_result
      until: pkg_result is success
      when:
        - memcapture_install is defined
        - memcapture_install | bool
        - ansible_os_family == "Debian"

    - name: Download Rustup
      ansible.builtin.get_url:
        url: https://sh.rustup.rs
        dest: "{{ memcapture_bin_path }}/rustup.sh"
        mode: '0600'
      when: (memcapture_download is defined and memcapture_download | bool)

    - name: Install rustup
      ansible.builtin.command: sh rustup.sh -y
      args:
        chdir: "{{ memcapture_bin_path }}"
        creates: /root/.cargo/env
      when: >
        (memcapture_install is defined and memcapture_install | bool)

    - name: Add the MUSL target for Rust
      ansible.builtin.command: rustup target add x86_64-unknown-linux-musl
      args:
        creates: /root/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.58/src/unix/notbsd/linux/musl
      environment:
        PATH: /root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    - name: Build avml
      ansible.builtin.command: cargo build --release --target x86_64-unknown-linux-musl
      args:
        chdir: "{{ memcapture_bin_path }}/avml-{{ memcapture_avml_v }}"
        creates: "{{ avml_bin }}"
      environment:
        PATH: /root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    # - name: check appropriate permissions
    #   ansible.builtin.file:
    #     path: "{{ avml_bin }}"
    #     mode: '0700'

    - name: Install avml locally
      ansible.builtin.copy:
        src: "{{ avml_bin }}"
        dest: /usr/local/bin/
        mode: '0700'
        remote_src: true
      when: memcapture_install

    - name: Avml | Recover file on orchestrator
      ansible.builtin.fetch:
        src: "{{ avml_bin }}"
        dest: "{{ orchestrator_files_archives }}/"
        flat: yes

- name: Avml | Recover file on orchestrator
  ansible.builtin.copy:
    src: "{{ orchestrator_files_archives }}/avml"
    dest: "/usr/local/bin/avml"
    mode: '0700'
  when: avmlbin.stat.exists
