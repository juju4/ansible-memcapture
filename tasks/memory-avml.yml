---

- name: Set fact avml_archive
  set_fact:
    avml_archive: "{{ bin_path }}/{{ memcapture_avml_url | regex_replace('^.*/([^/].*)$', '\\1') }}"
- name: Set fact avml_bin...
  set_fact:
    avml_bin: "{{ bin_path }}/avml-{{ memcapture_avml_v }}/target/x86_64-unknown-linux-musl/release/avml"
    avml_capture: "{{ dst_path }}/{{ prefix }}-memory-avml.{{ memcapture_avml_ext }}"

- name: Ensure ansible dependencies are present
  package:
    name: libselinux-python
    state: present
  register: pkg_result
  until: pkg_result is success
  when: memcapture_install and ansible_os_family == "RedHat"

- name: Check if avml archive is present
  stat:
    path: "{{ avml_bin }}"
  register: avml
- name: Microsoft Avml download
  get_url:
    url: "{{ memcapture_avml_url }}"
    dest: "{{ avml_archive }}"
    mode: '0400'
  when: not avml.stat.exists and (memcapture_download is defined and memcapture_download)

- name: Extract avml
  unarchive:
    src: "{{ avml_archive }}"
    dest: "{{ bin_path }}"
  when: not avml.stat.exists

# No musl* packages on centos7, only starting with Fedora29
- name: Ensure avml build dependencies
  package:
    name: "{{ memory_avml_deps }}"
    state: present
  become: yes
  register: pkg_result
  until: pkg_result is success
  when:
    - memcapture_install is defined
    - memcapture_install|bool
    - ansible_os_family == "Debian"

- name: Download Rustup
  get_url:
    url: https://sh.rustup.rs
    dest: "{{ bin_path }}/rustup.sh"
    mode: '0600'
  when: (memcapture_download is defined and memcapture_download|bool)

- name: Install rustup
  command: sh rustup.sh -y
  args:
    chdir: "{{ bin_path }}"
    creates: /root/.cargo/env
  when: >
    (memcapture_install is defined and memcapture_install|bool)

- name: Add the MUSL target for Rust
  command: rustup target add x86_64-unknown-linux-musl
  environment:
    PATH: /root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

- name: Build avml
  command: cargo build --release --target x86_64-unknown-linux-musl
  args:
    chdir: "{{ bin_path }}/avml-{{ memcapture_avml_v }}"
    creates: "{{ avml_bin }}"
  environment:
    PATH: /root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

#- name: check appropriate permissions
#  file:
#    path: "{{ avml_bin }}"
#    mode: '0700'

- name: Check if existing avml capture
  stat:
    path: "{{ avml_capture }}"
  register: memcapture2

- name: memory capture (avml)
  command: "{{ avml_bin }} {{ memcapture_avml_args }} {{ avml_capture }}"
  args:
    chdir: "{{ bin_path }}"
  become: yes
  when: not memcapture2.stat.exists and (memcapture_capture is defined and memcapture_capture|bool)
  ignore_errors: true

- name: retrieve output hash
  stat:
    path: "{{ avml_capture }}"
    checksum_algorithm: sha256
  register: outputstat
- debug: var=outputstat.stat.checksum
