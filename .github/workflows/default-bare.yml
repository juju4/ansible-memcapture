---
name: default-bare

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:  # run weekly, every monday 03:00
    - cron: '0 3 * * 1'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ${{ matrix.distribution }}-${{ matrix.version }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - distribution: ubuntu
            version: '24.04'
            suite: default
            experimental: false
          - distribution: ubuntu
            version: '22.04'
            suite: default
            experimental: true
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: ""
      ANSIBLE_ROLE: juju4.memcapture
      ANSIBLE_SUITE: ${{ matrix.suite }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # tag=v5.0.0
        with:
          path: ${{ env.ANSIBLE_ROLE }}
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # tag=v6.0.0
        with:
          python-version: '3.x'
      - name: Cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830  # tag=v4.3.0
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt
            /var/_install
          key: cache-ansible-memcapture-${{ steps.get-date.outputs.date }}
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ansible --version
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          [ -f molecule/$ANSIBLE_SUITE/requirements.yml ] && ansible-galaxy install -r molecule/$ANSIBLE_SUITE/requirements.yml
          { echo '[defaults]'; echo 'callback_enabled = profile_tasks, timer'; echo 'roles_path = ../:/home/runner/.ansible/roles'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          set -x
          pwd
          env
          find . -ls
      - name: Cleaning
        run: |
          set -x
          df -h
          sudo rm -Rf /opt/hostedtoolcache/node/*
          sudo rm -Rf /usr/lib/jvm/temurin-*-jdk-amd64
          sudo rm -Rf /usr/local/lib/android
          df -h
      - name: Before script - systemctl
        run: |
          systemd-analyze security || true
          systemctl status --all --no-pager || true
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv test/integration/$ANSIBLE_SUITE/default.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv test/integration/$ANSIBLE_SUITE/default.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
      - name: On failure
        run: |
          systemctl -l --no-pager status
          systemctl -l --no-pager --failed
          ls -l /usr/bin/ | egrep '(python|pip|ansible)'
          pip freeze
          pip3 freeze
          ip addr
          cat /etc/resolv.conf
          host www.google.com
          ping -c 1 www.google.com || true
          ping -c 1 8.8.8.8 || true
        if: ${{ failure() }}
        continue-on-error: true
      - name: After script - ansible setup
        run: |
          ansible -i inventory --connection=local -m setup localhost
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - systemd
        run: |
          systemd-analyze security || true
          systemctl --failed || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - kernel info
        run: |
          ls /boot /usr/lib/debug/boot || true
          uname -a || true
          dpkg -l |grep linux-image || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - capture
        run: |
          sudo find /tmp/ir-bin -ls || true
          sudo find /tmp/cases -ls || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - check vol
        run: |
          vol.py isfinfo
          ls -lA ~/.volatility/cache || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - check files with vol3
        run: |
          set -x
          for file in `sudo find /tmp/cases -type f \( -iname '*.lime' -o -iname '*.aff4' \)`; do
            sudo vol.py -f $file linux.pslist.PsList || true
            sudo vol.py -f $file linux.lsof.Lsof || true
            sudo vol.py -f $file linux.bash.Bash || true
            sudo vol.py -vvvvv -f $file linux.malfind.Malfind || true
            sudo vol.py -vvvvv -f $file banners || true
          done
        if: ${{ always() }}
        continue-on-error: true
