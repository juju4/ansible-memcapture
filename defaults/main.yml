---
## note: colon in prefix creates issues (ex: LiME compile)
#prefix: "{{ ansible_fqdn }}-{{ ansible_date_time.iso8601 }}"
#prefix: "{{ ansible_fqdn }}-{{ ansible_date_time.epoch }}"
#prefix: "{{ ansible_fqdn }}-{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
prefix: "{{ ansible_fqdn }}"

## mount point for network share
dst_mount: "/tmp/cases"
## destination
#dst_path: "/tmp/{{ prefix }}-incidentreport"
#dst_path: "/vagrant/{{ prefix }}-incidentreport"
dst_path: "{{ dst_mount }}/{{ prefix }}-incidentreport"

## do we want to install new packages? might be required if building kernel module for example
## allow ansible to download stuff which does not exist, eventually build it?
## more impacting the evidence but sometimes have no choice...
memcapture_download: true
memcapture_build: true
memcapture_install: true
memcapture_capture: false

## can execute binaries from local network through nfs/smb or a local disk (but not really scaling here).
## if not set, it means local
#archives: nfs
#archives: samba
bin_path: "/tmp/ir-bin"
## FIXME! trusted static binaries?
##  https://github.com/andrew-d/static-binaries
##  https://github.com/minos-org/minos-static

## if using fmem, this is required! or extract for /proc/meminfo? (dd count format)
## 512MB = 536870912 = 0x1fffffff
## 4GB = 4294967296 = 0x100000000
#memory_size:
memcapture_memory_size: 512
memcapture_memory_bs: 1M
memcapture_fmem_v: 1.6-1

memcapture_use_linpmem: true
memcapture_use_fmem: true
memcapture_use_lmg: true

#memcapture_winpmem_v: 2.1.post4
#memcapture_winpmem_url: https://github.com/google/rekall/releases/download/v1.5.1/winpmem-2.1.post4.exe
#memcapture_winpmem_ext: aff4
memcapture_winpmem_v: 1.6.2
memcapture_winpmem_url: https://github.com/google/rekall/releases/download/v1.3.1/winpmem_1.6.2.exe
memcapture_winpmem_ext: img
memcapture_linpmem_v: 2.1.post4
memcapture_linpmem_url: https://github.com/google/rekall/releases/download/v1.5.1/linpmem-2.1.post4
memcapture_linpmem_ext: aff4
## linpmem v1 is distributed as source, need to be compile but not as is on 2016 kernel
#memcapture_linpmem_v: 1.0RC1
#memcapture_linpmem_url: https://github.com/google/rekall/releases/download/v1.0.2/linux_pmem_1.0RC1.tgz
#memcapture_linpmem_ext: img
memcapture_osxpmem_v: 2.1.post4
memcapture_osxpmem_url: https://github.com/google/rekall/releases/download/v1.5.1/osxpmem-2.1.post4.zip
memcapture_osxpmem_ext: raw
## map = aff4
#memcapture_osxpmem_ext: map
#memcapture_osxpmem_v: 1.0RC3
#memcapture_osxpmem_url: https://github.com/google/rekall/releases/download/v1.0rc11/OSXPMem-RC3-signed.tar.gz
#memcapture_osxpmem_ext: img

## fetch output to orchestrator?
## Note: might be better to do manually as large file can create a module failure
## {"failed": true, "item": "/opt/tmp/cases/memcapture-myhost-memory.tar.gz", "module_stderr": "Traceback (most recent call last):\n  File \"/tmp/ansible_7ztNUY/ansible_module_slurp.py\", line 78, in <module>\n    main()\n  File \"/tmp/ansible_7ztNUY/ansible_module_slurp.py\", line 70, in main\n    data = base64.b64encode(open(source, 'rb').read())\nMemoryError\n", "module_stdout": "", "msg": "MODULE FAILURE"}
memcapture_pull: false
memcapture_pulldir: tmp/

## just for centos6/epel ansible 2.2.0 to avoid undefined variable. defined during play on Macos only
kdk_v: ''

